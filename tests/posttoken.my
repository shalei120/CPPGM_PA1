whitespace-sequence 0 
new-line 0 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 10 <iostream>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <sstream>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <fstream>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 11 <stdexcept>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 11 <algorithm>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 15 <unordered_map>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 15 <unordered_set>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <cassert>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 8 <memory>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <cstring>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <cstdint>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <climits>
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 5 <map>
new-line 0 
new-line 0 
new-line 0 
identifier 5 using
whitespace-sequence 0 
identifier 9 namespace
whitespace-sequence 0 
identifier 3 std
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x1f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x0f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 12
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x07
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 18
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 12
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 3
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 24 "utf8-->unicode failed!"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 4 0x7f
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 1 0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 5 0x7ff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 4 0x80
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xC0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0x07c0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 6 0xffff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 5 0x800
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xe0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0xf000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 12
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 5 0xfc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 8 0x10ffff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 7 0x10000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xf0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 8 0x1c0000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 18
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 7 0x3f000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 12
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 5 0xfc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 28 "utf8 segmentation error!\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 13 Unicode2Utf16
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 3 res
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 4 "  "
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
pp-number 7 0x10000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0xff00
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0x00ff
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
pp-number 8 0x10ffff
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 res
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 6 "    "
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 2 uu
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 7 0x10000
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 2 uu
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 7 0x3fc00
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 10
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xd8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 2 uu
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 7 0xc0000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 18
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 2 uu
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xff
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 [
pp-number 1 3
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xdc
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 2 uu
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 5 0x300
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 29 "unicode ---> utf16 error!\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 3 res
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 15 strUtf82Unicode
preprocessing-op-or-punc 1 (
identifier 6 string
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 1 u
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 16 strUnicode2Utf16
preprocessing-op-or-punc 1 (
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 3 uni
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 3 uni
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 2 +=
identifier 13 Unicode2Utf16
preprocessing-op-or-punc 1 (
identifier 3 uni
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 16 strUnicode2Utf32
preprocessing-op-or-punc 1 (
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 3 uni
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 3 uni
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 3 uni
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xff
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 3 uni
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0xff00
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 3 uni
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 8 0xff0000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 16
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 3 uni
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 10 0xff000000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 24
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 9 EndOfFile
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 14 PartialComment
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 10 0x00110000
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 switch
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '1'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '2'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '3'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '4'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '5'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '6'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '7'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '9'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'A'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'B'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'C'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'c'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'D'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'd'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'e'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'F'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'f'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 31 "HexCharToValue of nonhex char"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 4 pair
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xA8
preprocessing-op-or-punc 1 ,
pp-number 4 0xA8
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAA
preprocessing-op-or-punc 1 ,
pp-number 4 0xAA
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAD
preprocessing-op-or-punc 1 ,
pp-number 4 0xAD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAF
preprocessing-op-or-punc 1 ,
pp-number 4 0xAF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xB2
preprocessing-op-or-punc 1 ,
pp-number 4 0xB5
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xB7
preprocessing-op-or-punc 1 ,
pp-number 4 0xBA
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xBC
preprocessing-op-or-punc 1 ,
pp-number 4 0xBE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xC0
preprocessing-op-or-punc 1 ,
pp-number 4 0xD6
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xD8
preprocessing-op-or-punc 1 ,
pp-number 4 0xF6
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xF8
preprocessing-op-or-punc 1 ,
pp-number 4 0xFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 5 0x100
preprocessing-op-or-punc 1 ,
pp-number 6 0x167F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x1681
preprocessing-op-or-punc 1 ,
pp-number 6 0x180D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x180F
preprocessing-op-or-punc 1 ,
pp-number 6 0x1FFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x200B
preprocessing-op-or-punc 1 ,
pp-number 6 0x200D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x202A
preprocessing-op-or-punc 1 ,
pp-number 6 0x202E
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x203F
preprocessing-op-or-punc 1 ,
pp-number 6 0x2040
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2054
preprocessing-op-or-punc 1 ,
pp-number 6 0x2054
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2060
preprocessing-op-or-punc 1 ,
pp-number 6 0x206F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2070
preprocessing-op-or-punc 1 ,
pp-number 6 0x218F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2460
preprocessing-op-or-punc 1 ,
pp-number 6 0x24FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2776
preprocessing-op-or-punc 1 ,
pp-number 6 0x2793
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2C00
preprocessing-op-or-punc 1 ,
pp-number 6 0x2DFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2E80
preprocessing-op-or-punc 1 ,
pp-number 6 0x2FFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3004
preprocessing-op-or-punc 1 ,
pp-number 6 0x3007
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3021
preprocessing-op-or-punc 1 ,
pp-number 6 0x302F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3031
preprocessing-op-or-punc 1 ,
pp-number 6 0x303F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3040
preprocessing-op-or-punc 1 ,
pp-number 6 0xD7FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xF900
preprocessing-op-or-punc 1 ,
pp-number 6 0xFD3D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFD40
preprocessing-op-or-punc 1 ,
pp-number 6 0xFDCF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFDF0
preprocessing-op-or-punc 1 ,
pp-number 6 0xFE44
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFE47
preprocessing-op-or-punc 1 ,
pp-number 6 0xFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x10000
preprocessing-op-or-punc 1 ,
pp-number 7 0x1FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x20000
preprocessing-op-or-punc 1 ,
pp-number 7 0x2FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x30000
preprocessing-op-or-punc 1 ,
pp-number 7 0x3FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x40000
preprocessing-op-or-punc 1 ,
pp-number 7 0x4FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x50000
preprocessing-op-or-punc 1 ,
pp-number 7 0x5FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x60000
preprocessing-op-or-punc 1 ,
pp-number 7 0x6FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x70000
preprocessing-op-or-punc 1 ,
pp-number 7 0x7FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x80000
preprocessing-op-or-punc 1 ,
pp-number 7 0x8FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x90000
preprocessing-op-or-punc 1 ,
pp-number 7 0x9FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xA0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xAFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xB0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xBFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xC0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xCFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xD0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xDFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xE0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xEFFFD
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 4 pair
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 5 0x300
preprocessing-op-or-punc 1 ,
pp-number 5 0x36F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x1DC0
preprocessing-op-or-punc 1 ,
pp-number 6 0x1DFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x20D0
preprocessing-op-or-punc 1 ,
pp-number 6 0x20FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFE20
preprocessing-op-or-punc 1 ,
pp-number 6 0xFE2F
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 5 first
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 6 second
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 32 Digraph_IdentifierLike_Operators
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
string-literal 5 "new"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "delete"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "and"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "and_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "bitand"
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
string-literal 7 "bitor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "compl"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "not"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "not_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 4 "or"
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
string-literal 7 "or_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "xor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "xor_eq"
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 31 SimpleEscapeSequence_CodePoints
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 '"'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'n'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'r'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 't'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'v'
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 11 Octal_Digit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
preprocessing-op-or-punc 1 ,
character-literal 3 '8'
preprocessing-op-or-punc 1 ,
character-literal 3 '9'
preprocessing-op-or-punc 1 ,
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
character-literal 3 'c'
preprocessing-op-or-punc 1 ,
character-literal 3 'd'
preprocessing-op-or-punc 1 ,
character-literal 3 'e'
preprocessing-op-or-punc 1 ,
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
character-literal 3 'A'
preprocessing-op-or-punc 1 ,
character-literal 3 'B'
preprocessing-op-or-punc 1 ,
character-literal 3 'C'
preprocessing-op-or-punc 1 ,
character-literal 3 'D'
preprocessing-op-or-punc 1 ,
character-literal 3 'E'
preprocessing-op-or-punc 1 ,
character-literal 3 'F'
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 8 Nondigit
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
character-literal 3 'c'
preprocessing-op-or-punc 1 ,
character-literal 3 'd'
preprocessing-op-or-punc 1 ,
character-literal 3 'e'
preprocessing-op-or-punc 1 ,
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
character-literal 3 'g'
preprocessing-op-or-punc 1 ,
character-literal 3 'h'
preprocessing-op-or-punc 1 ,
character-literal 3 'i'
preprocessing-op-or-punc 1 ,
character-literal 3 'j'
preprocessing-op-or-punc 1 ,
character-literal 3 'k'
preprocessing-op-or-punc 1 ,
character-literal 3 'l'
preprocessing-op-or-punc 1 ,
character-literal 3 'm'
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
character-literal 3 'n'
preprocessing-op-or-punc 1 ,
character-literal 3 'o'
preprocessing-op-or-punc 1 ,
character-literal 3 'p'
preprocessing-op-or-punc 1 ,
character-literal 3 'q'
preprocessing-op-or-punc 1 ,
character-literal 3 'r'
preprocessing-op-or-punc 1 ,
character-literal 3 's'
preprocessing-op-or-punc 1 ,
character-literal 3 't'
preprocessing-op-or-punc 1 ,
character-literal 3 'u'
preprocessing-op-or-punc 1 ,
character-literal 3 'v'
preprocessing-op-or-punc 1 ,
character-literal 3 'w'
preprocessing-op-or-punc 1 ,
character-literal 3 'x'
preprocessing-op-or-punc 1 ,
character-literal 3 'y'
preprocessing-op-or-punc 1 ,
character-literal 3 'z'
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
character-literal 3 'A'
preprocessing-op-or-punc 1 ,
character-literal 3 'B'
preprocessing-op-or-punc 1 ,
character-literal 3 'C'
preprocessing-op-or-punc 1 ,
character-literal 3 'D'
preprocessing-op-or-punc 1 ,
character-literal 3 'E'
preprocessing-op-or-punc 1 ,
character-literal 3 'F'
preprocessing-op-or-punc 1 ,
character-literal 3 'G'
preprocessing-op-or-punc 1 ,
character-literal 3 'H'
preprocessing-op-or-punc 1 ,
character-literal 3 'I'
preprocessing-op-or-punc 1 ,
character-literal 3 'J'
preprocessing-op-or-punc 1 ,
character-literal 3 'K'
preprocessing-op-or-punc 1 ,
character-literal 3 'L'
preprocessing-op-or-punc 1 ,
character-literal 3 'M'
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
character-literal 3 'N'
preprocessing-op-or-punc 1 ,
character-literal 3 'O'
preprocessing-op-or-punc 1 ,
character-literal 3 'P'
preprocessing-op-or-punc 1 ,
character-literal 3 'Q'
preprocessing-op-or-punc 1 ,
character-literal 3 'R'
preprocessing-op-or-punc 1 ,
character-literal 3 'S'
preprocessing-op-or-punc 1 ,
character-literal 3 'T'
preprocessing-op-or-punc 1 ,
character-literal 3 'U'
preprocessing-op-or-punc 1 ,
character-literal 3 'V'
preprocessing-op-or-punc 1 ,
character-literal 3 'W'
preprocessing-op-or-punc 1 ,
character-literal 3 'X'
preprocessing-op-or-punc 1 ,
character-literal 3 'Y'
preprocessing-op-or-punc 1 ,
character-literal 3 'Z'
preprocessing-op-or-punc 1 ,
character-literal 3 '_'
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
preprocessing-op-or-punc 1 ,
character-literal 3 '8'
preprocessing-op-or-punc 1 ,
character-literal 3 '9'
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 5 first
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 6 second
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Nondigit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 Nondigit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_dchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 '('
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 ')'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\t'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\v'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\f'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_cchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\''
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_schar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\"'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_hchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_qchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\"'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 5 class
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 1 {
new-line 0 
identifier 6 public
preprocessing-op-or-punc 1 :
new-line 0 
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 13 RawStringBase
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 10 0x00120000
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 9 RawString
preprocessing-op-or-punc 1 ,
identifier 9 delimiter
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 Translate
preprocessing-op-or-punc 1 (
identifier 6 string
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 11 exitsuccess
preprocessing-op-or-punc 1 =
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 1 s
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 10
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
preprocessing-op-or-punc 1 -
pp-number 1 1
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 32 "utf8 invalid unit (111111xx)\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'R'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 20
preprocessing-op-or-punc 1 ;
identifier 9 RawString
preprocessing-op-or-punc 2 +=
character-literal 3 'R'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 6
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 11
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '#'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '^'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '('
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '['
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 ')'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 ']'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '!'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '|'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '<'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '{'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '}'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '-'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '~'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 19
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 18
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 18
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
pp-number 4 0x0a
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 'R'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_dchar
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 22
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
preprocessing-op-or-punc 3 new
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 44 "invalid characters in raw string delimiter"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 23
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 :
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 j
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 ,
identifier 1 k
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 k
preprocessing-op-or-punc 1 <
identifier 9 delimiter
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 j
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 ,
identifier 1 k
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 9 delimiter
preprocessing-op-or-punc 1 [
identifier 1 k
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 j
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 11 exitsuccess
preprocessing-op-or-punc 1 =
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 exitsuccess
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 9 delimiter
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 9 RawString
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 13 RawStringBase
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 11 exitsuccess
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
preprocessing-op-or-punc 3 new
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 43 "little DFA failed? What the hell is it?\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 4 back
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 10 RawStrings
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 13 RawStringBase
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 10 RawStrings
preprocessing-op-or-punc 1 [
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 13 RawStringBase
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 4 enum
whitespace-sequence 0 
identifier 16 EFundamentalType
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 14 FT_SIGNED_CHAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 FT_SHORT_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 FT_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 FT_LONG_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 16 FT_LONG_LONG_INT
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 16 FT_UNSIGNED_CHAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 21 FT_UNSIGNED_SHORT_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 15 FT_UNSIGNED_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 20 FT_UNSIGNED_LONG_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 25 FT_UNSIGNED_LONG_LONG_INT
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 10 FT_WCHAR_T
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 FT_CHAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 FT_CHAR16_T
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 FT_CHAR32_T
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 7 FT_BOOL
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 8 FT_FLOAT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 FT_DOUBLE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 14 FT_LONG_DOUBLE
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 7 FT_VOID
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 12 FT_NULLPTR_T
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 FT_DEFAULT
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
identifier 8 typename
whitespace-sequence 0 
identifier 1 T
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 6 signed
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 14 FT_SIGNED_CHAR
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 5 short
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 FT_SHORT_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 FT_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 11 FT_LONG_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 16 FT_LONG_LONG_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 16 FT_UNSIGNED_CHAR
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 5 short
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 21 FT_UNSIGNED_SHORT_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 15 FT_UNSIGNED_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 20 FT_UNSIGNED_LONG_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 25 FT_UNSIGNED_LONG_LONG_INT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 7 wchar_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 10 FT_WCHAR_T
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 FT_CHAR
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char16_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 11 FT_CHAR16_T
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char32_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 11 FT_CHAR32_T
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 bool
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 FT_BOOL
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 5 float
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 8 FT_FLOAT
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 6 double
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 9 FT_DOUBLE
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 6 double
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 14 FT_LONG_DOUBLE
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 void
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 FT_VOID
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
identifier 8 template
preprocessing-op-or-punc 1 <
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 9 nullptr_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 FT_NULLPTR_T
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 3 map
preprocessing-op-or-punc 1 <
identifier 16 EFundamentalType
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 26 FundamentalTypeToStringMap
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 14 FT_SIGNED_CHAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "signed char"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 FT_SHORT_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "short int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 FT_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 FT_LONG_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "long int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 16 FT_LONG_LONG_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 15 "long long int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 16 FT_UNSIGNED_CHAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 15 "unsigned char"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 21 FT_UNSIGNED_SHORT_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 20 "unsigned short int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 15 FT_UNSIGNED_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "unsigned int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 20 FT_UNSIGNED_LONG_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 19 "unsigned long int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 25 FT_UNSIGNED_LONG_LONG_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 24 "unsigned long long int"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 FT_WCHAR_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "wchar_t"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 FT_CHAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 6 "char"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 FT_CHAR16_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "char16_t"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 FT_CHAR32_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "char32_t"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 FT_BOOL
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 6 "bool"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 FT_FLOAT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "float"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 FT_DOUBLE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "double"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 14 FT_LONG_DOUBLE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "long double"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 FT_VOID
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 6 "void"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 FT_NULLPTR_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "nullptr_t"
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 4 enum
whitespace-sequence 0 
identifier 10 ETokenType
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 10 KW_ALIGNAS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_ALIGNOF
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 KW_ASM
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_AUTO
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_BOOL
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_BREAK
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_CASE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_CATCH
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_CHAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_CHAR16_T
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_CHAR32_T
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_CLASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_CONST
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 KW_CONSTEXPR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 13 KW_CONST_CAST
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_CONTINUE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_DECLTYPE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_DEFAULT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_DELETE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 KW_DO
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_DOUBLE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 15 KW_DYNAMIC_CAST
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_ELSE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_ENUM
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_EXPLICIT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_EXPORT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_EXTERN
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_FALSE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_FLOAT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 KW_FOR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_FRIEND
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_GOTO
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 KW_IF
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_INLINE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 KW_INT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_LONG
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_MUTABLE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 KW_NAMESPACE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 KW_NEW
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_NOEXCEPT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_NULLPTR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_OPERATOR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_PRIVATE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 KW_PROTECTED
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_PUBLIC
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_REGISTER
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 18 KW_REINTERPET_CAST
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_RETURN
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_SHORT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_SIGNED
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_SIZEOF
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_STATIC
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 16 KW_STATIC_ASSERT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 14 KW_STATIC_CAST
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_STRUCT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_SWITCH
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_TEMPLATE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_THIS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 15 KW_THREAD_LOCAL
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_THROW
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_TRUE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 KW_TRY
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_TYPEDEF
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 KW_TYPEID
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_TYPENAME
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_UNION
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_UNSIGNED
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_USING
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_VIRTUAL
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 KW_VOID
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 KW_VOLATILE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 KW_WCHAR_T
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 KW_WHILE
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 9 OP_LBRACE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_RBRACE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_LSQUARE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_RSQUARE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_LPAREN
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_RPAREN
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_BOR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_XOR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_COMPL
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_AMP
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 OP_LNOT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 OP_SEMICOLON
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_COLON
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 OP_DOTS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_QMARK
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_COLON2
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_DOT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_DOTSTAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 OP_PLUS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_MINUS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 OP_STAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_DIV
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_MOD
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_ASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_LT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_GT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_PLUSASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 11 OP_MINUSASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_STARASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_DIVASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_MODASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_XORASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 10 OP_BANDASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_BORASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_LSHIFT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 9 OP_RSHIFT
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 OP_RSHIFTASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 OP_LSHIFTASS
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_EQ
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_NE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_LE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 5 OP_GE
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 7 OP_LAND
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_LOR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_INC
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 6 OP_DEC
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_COMMA
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 12 OP_ARROWSTAR
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
identifier 8 OP_ARROW
preprocessing-op-or-punc 1 ,
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_map
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 ETokenType
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 20 StringToTokenTypeMap
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "alignas"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_ALIGNAS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "alignof"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_ALIGNOF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "asm"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 KW_ASM
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "auto"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_AUTO
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "bool"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_BOOL
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "break"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_BREAK
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "case"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_CASE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "catch"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_CATCH
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "char"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_CHAR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "char16_t"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_CHAR16_T
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "char32_t"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_CHAR32_T
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "class"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_CLASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "const"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_CONST
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 11 "constexpr"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 KW_CONSTEXPR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 12 "const_cast"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 13 KW_CONST_CAST
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "continue"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_CONTINUE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "decltype"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_DECLTYPE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "default"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_DEFAULT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "delete"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_DELETE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "do"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 KW_DO
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "double"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_DOUBLE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 14 "dynamic_cast"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 15 KW_DYNAMIC_CAST
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "else"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_ELSE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "enum"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_ENUM
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "explicit"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_EXPLICIT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "export"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_EXPORT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "extern"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_EXTERN
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "false"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_FALSE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "float"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_FLOAT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "for"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 KW_FOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "friend"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_FRIEND
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "goto"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_GOTO
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "if"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 KW_IF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "inline"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_INLINE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "int"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 KW_INT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "long"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_LONG
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "mutable"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_MUTABLE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 11 "namespace"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 KW_NAMESPACE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "new"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 KW_NEW
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "noexcept"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_NOEXCEPT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "nullptr"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_NULLPTR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "operator"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_OPERATOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "private"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_PRIVATE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 11 "protected"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 KW_PROTECTED
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "public"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_PUBLIC
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "register"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_REGISTER
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 18 "reinterpret_cast"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 18 KW_REINTERPET_CAST
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "return"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_RETURN
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "short"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_SHORT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "signed"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_SIGNED
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "sizeof"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_SIZEOF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "static"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_STATIC
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 15 "static_assert"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 16 KW_STATIC_ASSERT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 13 "static_cast"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 14 KW_STATIC_CAST
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "struct"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_STRUCT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "switch"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_SWITCH
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "template"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_TEMPLATE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "this"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_THIS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 14 "thread_local"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 15 KW_THREAD_LOCAL
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "throw"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_THROW
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "true"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_TRUE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "try"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 KW_TRY
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "typedef"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_TYPEDEF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "typeid"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 KW_TYPEID
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "typename"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_TYPENAME
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "union"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_UNION
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "unsigned"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_UNSIGNED
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "using"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_USING
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "virtual"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_VIRTUAL
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 6 "void"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 KW_VOID
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 10 "volatile"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 KW_VOLATILE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 9 "wchar_t"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 KW_WCHAR_T
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "while"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 KW_WHILE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "{"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_LBRACE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "<%"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_LBRACE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "}"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_RBRACE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "%>"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_RBRACE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "["
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_LSQUARE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "<:"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_LSQUARE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "]"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_RSQUARE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 ":>"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_RSQUARE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "("
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_LPAREN
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 ")"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_RPAREN
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "|"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_BOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "bitor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_BOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "^"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_XOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "xor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_XOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "~"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_COMPL
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "compl"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_COMPL
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "&"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_AMP
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "bitand"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_AMP
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "!"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_LNOT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "not"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_LNOT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 ";"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 OP_SEMICOLON
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 ":"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_COLON
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "..."
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_DOTS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "?"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_QMARK
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "::"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_COLON2
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "."
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_DOT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 ".*"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_DOTSTAR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "+"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_PLUS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "-"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_MINUS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "*"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_STAR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "/"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_DIV
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "%"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_MOD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_ASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 "<"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_LT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 ">"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_GT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "+="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_PLUSASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "-="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 OP_MINUSASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "*="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_STARASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "/="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_DIVASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "%="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_MODASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "^="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_XORASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "xor_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_XORASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "&="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_BANDASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "and_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 OP_BANDASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "|="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_BORASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 7 "or_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_BORASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "<<"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_LSHIFT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 ">>"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 OP_RSHIFT
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 ">>="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 OP_RSHIFTASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "<<="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 OP_LSHIFTASS
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "=="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_EQ
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "!="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_NE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 8 "not_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_NE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "<="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_LE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 ">="
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 OP_GE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "&&"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_LAND
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "and"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 7 OP_LAND
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "||"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_LOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "or"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_LOR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "++"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_INC
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "--"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 OP_DEC
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 3 ","
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_COMMA
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 5 "->*"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 OP_ARROWSTAR
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
string-literal 4 "->"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 8 OP_ARROW
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 3 map
preprocessing-op-or-punc 1 <
identifier 10 ETokenType
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 20 TokenTypeToStringMap
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_ALIGNAS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_ALIGNAS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_ALIGNOF
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_ALIGNOF"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 KW_ASM
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "KW_ASM"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_AUTO
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_AUTO"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_BOOL
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_BOOL"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_BREAK
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_BREAK"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_CASE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_CASE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_CATCH
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_CATCH"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_CHAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_CHAR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_CHAR16_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_CHAR16_T"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_CHAR32_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_CHAR32_T"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_CLASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_CLASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_CONST
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_CONST"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 KW_CONSTEXPR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "KW_CONSTEXPR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 13 KW_CONST_CAST
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 15 "KW_CONST_CAST"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_CONTINUE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_CONTINUE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_DECLTYPE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_DECLTYPE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_DEFAULT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_DEFAULT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_DELETE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_DELETE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 KW_DO
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "KW_DO"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_DOUBLE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_DOUBLE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 15 KW_DYNAMIC_CAST
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 17 "KW_DYNAMIC_CAST"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_ELSE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_ELSE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_ENUM
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_ENUM"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_EXPLICIT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_EXPLICIT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_EXPORT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_EXPORT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_EXTERN
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_EXTERN"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_FALSE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_FALSE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_FLOAT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_FLOAT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 KW_FOR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "KW_FOR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_FRIEND
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_FRIEND"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_GOTO
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_GOTO"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 KW_IF
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "KW_IF"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_INLINE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_INLINE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 KW_INT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "KW_INT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_LONG
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_LONG"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_MUTABLE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_MUTABLE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 KW_NAMESPACE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "KW_NAMESPACE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 KW_NEW
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "KW_NEW"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_NOEXCEPT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_NOEXCEPT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_NULLPTR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_NULLPTR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_OPERATOR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_OPERATOR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_PRIVATE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_PRIVATE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 KW_PROTECTED
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "KW_PROTECTED"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_PUBLIC
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_PUBLIC"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_REGISTER
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_REGISTER"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 18 KW_REINTERPET_CAST
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 20 "KW_REINTERPET_CAST"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_RETURN
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_RETURN"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_SHORT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_SHORT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_SIGNED
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_SIGNED"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_SIZEOF
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_SIZEOF"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_STATIC
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_STATIC"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 16 KW_STATIC_ASSERT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 18 "KW_STATIC_ASSERT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 14 KW_STATIC_CAST
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 16 "KW_STATIC_CAST"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_STRUCT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_STRUCT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_SWITCH
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_SWITCH"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_TEMPLATE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_TEMPLATE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_THIS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_THIS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 15 KW_THREAD_LOCAL
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 17 "KW_THREAD_LOCAL"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_THROW
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_THROW"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_TRUE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_TRUE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 KW_TRY
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "KW_TRY"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_TYPEDEF
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_TYPEDEF"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 KW_TYPEID
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "KW_TYPEID"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_TYPENAME
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_TYPENAME"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_UNION
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_UNION"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_UNSIGNED
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_UNSIGNED"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_USING
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_USING"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_VIRTUAL
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_VIRTUAL"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 KW_VOID
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "KW_VOID"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 KW_VOLATILE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "KW_VOLATILE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 KW_WCHAR_T
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "KW_WCHAR_T"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 KW_WHILE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "KW_WHILE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_LBRACE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_LBRACE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_RBRACE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_RBRACE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_LSQUARE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_LSQUARE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_RSQUARE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_RSQUARE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_LPAREN
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_LPAREN"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_RPAREN
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_RPAREN"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_BOR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_BOR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_XOR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_XOR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_COMPL
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_COMPL"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_AMP
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_AMP"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 OP_LNOT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "OP_LNOT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 OP_SEMICOLON
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "OP_SEMICOLON"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_COLON
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_COLON"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 OP_DOTS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "OP_DOTS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_QMARK
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_QMARK"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_COLON2
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_COLON2"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_DOT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_DOT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_DOTSTAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_DOTSTAR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 OP_PLUS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "OP_PLUS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_MINUS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_MINUS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 OP_STAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "OP_STAR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_DIV
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_DIV"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_MOD
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_MOD"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_ASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_ASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_LT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_LT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_GT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_GT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_PLUSASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_PLUSASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 11 OP_MINUSASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 13 "OP_MINUSASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_STARASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_STARASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_DIVASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_DIVASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_MODASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_MODASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_XORASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_XORASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 10 OP_BANDASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 12 "OP_BANDASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_BORASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_BORASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_LSHIFT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_LSHIFT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 9 OP_RSHIFT
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 11 "OP_RSHIFT"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 OP_RSHIFTASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "OP_RSHIFTASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 OP_LSHIFTASS
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "OP_LSHIFTASS"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_EQ
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_EQ"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_NE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_NE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_LE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_LE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 OP_GE
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "OP_GE"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 7 OP_LAND
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 9 "OP_LAND"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_LOR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_LOR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_INC
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_INC"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 6 OP_DEC
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "OP_DEC"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_COMMA
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_COMMA"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 12 OP_ARROWSTAR
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 14 "OP_ARROWSTAR"
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 8 OP_ARROW
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 10 "OP_ARROW"
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 4 char
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 switch
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '1'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '2'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '3'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '4'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '5'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '6'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '7'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 '9'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'A'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'B'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'C'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'D'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
character-literal 3 'F'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 32 "ValueToHexChar of nonhex value"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 7 HexDump
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 4 void
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 5 pdata
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 1 p
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 *
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 pdata
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 (
identifier 6 nbytes
preprocessing-op-or-punc 1 *
pp-number 1 2
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 3 for
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 size_t
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 *
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 p
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xF0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 *
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 p
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x0F
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 struct
whitespace-sequence 0 
identifier 26 DebugPostTokenOutputStream
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 10 "invalid "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 11 emit_simple
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 10 ETokenType
whitespace-sequence 0 
identifier 10 token_type
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 9 "simple "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 20 TokenTypeToStringMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 10 token_type
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 13 "identifier "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 4 void
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 10 "literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 26 FundamentalTypeToStringMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 type
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 7 HexDump
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 18 emit_literal_array
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 12 num_elements
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 4 void
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 10 "literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 12 " array of "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 12 num_elements
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 26 FundamentalTypeToStringMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 type
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 7 HexDump
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 35 emit_user_defined_literal_character
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 9 ud_suffix
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 4 void
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 23 "user-defined-literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 9 ud_suffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 13 " character "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 26 FundamentalTypeToStringMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 type
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 7 HexDump
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 38 emit_user_defined_literal_string_array
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 9 ud_suffix
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 12 num_elements
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 4 void
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 23 "user-defined-literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 9 ud_suffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 19 " string array of "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 12 num_elements
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 26 FundamentalTypeToStringMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 type
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 7 HexDump
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 33 emit_user_defined_literal_integer
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 9 ud_suffix
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 prefix
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 23 "user-defined-literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 9 ud_suffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 11 " integer "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 prefix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 34 emit_user_defined_literal_floating
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 source
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 9 ud_suffix
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 prefix
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 23 "user-defined-literal "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 source
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 3 " "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 9 ud_suffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 12 " floating "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 6 prefix
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 8 emit_eof
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cout
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 5 "eof"
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
identifier 5 float
whitespace-sequence 0 
identifier 15 PA2Decode_float
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 13 istringstream
whitespace-sequence 0 
identifier 3 iss
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 float
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 iss
whitespace-sequence 0 
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 6 double
whitespace-sequence 0 
identifier 16 PA2Decode_double
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 13 istringstream
whitespace-sequence 0 
identifier 3 iss
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 double
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 iss
whitespace-sequence 0 
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 4 long
whitespace-sequence 0 
identifier 6 double
whitespace-sequence 0 
identifier 21 PA2Decode_long_double
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 13 istringstream
whitespace-sequence 0 
identifier 3 iss
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 6 double
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 iss
whitespace-sequence 0 
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 x
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 6 string
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 4 bool
whitespace-sequence 0 
identifier 10 isunsigned
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 5 num16
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 3 "0"
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ,
identifier 5 start
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'X'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 start
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 start
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 num16
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 reverse
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 5 begin
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ,
identifier 5 zeros
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 while
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 3 pos
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
pp-number 1 0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 pos
preprocessing-op-or-punc 2 --
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 zeros
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 num16
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
identifier 5 zeros
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 start
preprocessing-op-or-punc 1 ;
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 j
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 j
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 j
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 %
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 /
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 num16
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 j
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 j
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 j
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 %
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 curr
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 /
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 num16
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 14 ValueToHexChar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 /
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 4
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 3 0x8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 3 0x8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 10
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 10 isunsigned
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 10 isunsigned
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 5 num16
preprocessing-op-or-punc 1 [
identifier 5 num16
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 3 0x8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 3 0x8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 w
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 10
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 10 isunsigned
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 10 isunsigned
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
identifier 6 struct
whitespace-sequence 0 
identifier 14 IPPTokenStream
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 15 string_literals
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 26 DebugPostTokenOutputStream
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 20 differentiate_string
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
identifier 16 EFundamentalType
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 8 udsuffix
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 7 invalid
preprocessing-op-or-punc 1 =
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 uint
whitespace-sequence 0 
identifier 3 pos
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_DEFAULT
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 char
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char32_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 7 wchar_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char16_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'R'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 cerr
preprocessing-op-or-punc 2 <<
string-literal 18 "Is that possible"
preprocessing-op-or-punc 2 <<
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'R'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 cerr
preprocessing-op-or-punc 2 <<
string-literal 18 "Is that possible"
preprocessing-op-or-punc 2 <<
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'R'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 cerr
preprocessing-op-or-punc 2 <<
string-literal 18 "Is that possible"
preprocessing-op-or-punc 2 <<
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 7 invalid
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'a'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\a'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'b'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\b'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'f'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\f'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'n'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'r'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\r'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 't'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'v'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\v'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 -
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 cerr
preprocessing-op-or-punc 2 <<
string-literal 19 "is that possible?"
preprocessing-op-or-punc 2 <<
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 cerr
preprocessing-op-or-punc 2 <<
string-literal 19 "is that possible?"
preprocessing-op-or-punc 2 <<
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 6 escape
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 escape
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 ?
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 :
identifier 3 pos
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 3 pos
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 uint
whitespace-sequence 0 
identifier 6 istart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 3 pos
preprocessing-op-or-punc 1 ,
identifier 4 iend
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 3 iud
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 ;
identifier 4 data
preprocessing-op-or-punc 1 [
identifier 4 iend
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 ;
identifier 4 iend
preprocessing-op-or-punc 2 --
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 iud
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 iend
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 [
identifier 6 istart
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '('
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 [
identifier 4 iend
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 6 istart
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ,
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 4 iend
preprocessing-op-or-punc 1 -
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ,
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 istart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 6 istart
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 iend
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 iend
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 6 istart
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ,
identifier 4 iend
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
identifier 6 istart
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 3 iud
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 3 iud
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 invalid
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 5 total
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 totaldata
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 8 udsuffix
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 12 num_elements
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 7 invalid
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_DEFAULT
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 8 currtype
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 10 currsuffix
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 invalid
whitespace-sequence 0 
preprocessing-op-or-punc 2 |=
whitespace-sequence 0 
identifier 20 differentiate_string
preprocessing-op-or-punc 1 (
identifier 15 string_literals
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ,
identifier 8 currtype
preprocessing-op-or-punc 1 ,
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 10 currsuffix
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 udsuffix
preprocessing-op-or-punc 2 ==
string-literal 2 ""
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 currsuffix
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 10 currsuffix
preprocessing-op-or-punc 2 !=
string-literal 2 ""
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 currsuffix
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 7 invalid
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 10 FT_DEFAULT
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 8 currtype
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 currtype
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 FT_DEFAULT
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 currtype
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 7 invalid
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 5 total
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 15 string_literals
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 i
preprocessing-op-or-punc 2 !=
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
identifier 5 total
preprocessing-op-or-punc 2 +=
string-literal 3 " "
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 totaldata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 9 totaldata
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\0'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 clear
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 7 invalid
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 5 total
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char16_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 Unicode
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 15 strUtf82Unicode
preprocessing-op-or-punc 1 (
identifier 9 totaldata
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 totaldata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 strUnicode2Utf16
preprocessing-op-or-punc 1 (
identifier 7 Unicode
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char32_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 7 wchar_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 Unicode
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 15 strUtf82Unicode
preprocessing-op-or-punc 1 (
identifier 9 totaldata
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 9 totaldata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 strUnicode2Utf32
preprocessing-op-or-punc 1 (
identifier 7 Unicode
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 12 num_elements
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 9 totaldata
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 /
identifier 6 nbytes
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 18 emit_literal_array
preprocessing-op-or-punc 1 (
identifier 5 total
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 num_elements
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 totaldata
preprocessing-op-or-punc 1 .
identifier 4 data
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 9 totaldata
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 38 emit_user_defined_literal_string_array
preprocessing-op-or-punc 1 (
identifier 5 total
preprocessing-op-or-punc 1 ,
identifier 8 udsuffix
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 12 num_elements
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
identifier 9 totaldata
preprocessing-op-or-punc 1 .
identifier 4 data
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 9 totaldata
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 13 emit_new_line
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 16 emit_header_name
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 11 emit_simple
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 14 emit_pp_number
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 ERROR
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 8 udsuffix
preprocessing-op-or-punc 1 =
string-literal 3 "_"
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 char
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 <=
character-literal 3 '9'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 2 >=
character-literal 3 '1'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 1
preprocessing-op-or-punc 1 ;
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 '0'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 7
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 1
preprocessing-op-or-punc 1 ;
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 2 10
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 6
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'X'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 23
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 11
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 2 16
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 8
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 12
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 9
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 13
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 14
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 15
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 16
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'l'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 19
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'f'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'F'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 20
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 18
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'f'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'F'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 20
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 :
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '_'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
identifier 8 udsuffix
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 11
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 value
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 2 16
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 ERROR
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 GetTypeOfInteger
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 5 false
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 ppnumber
preprocessing-op-or-punc 1 [
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 value
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 33 emit_user_defined_literal_integer
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 8 udsuffix
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
identifier 8 udsuffix
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 15
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 double
whitespace-sequence 0 
identifier 6 dvalue
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 16 PA2Decode_double
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 6 double
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 6 dvalue
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 long
whitespace-sequence 0 
identifier 6 double
whitespace-sequence 0 
identifier 6 dvalue
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 21 PA2Decode_long_double
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 long
whitespace-sequence 0 
identifier 6 double
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 6 dvalue
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 float
whitespace-sequence 0 
identifier 6 dvalue
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 15 PA2Decode_float
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 5 float
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 6 dvalue
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 34 emit_user_defined_literal_floating
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 ,
identifier 8 udsuffix
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
pp-number 1 0
preprocessing-op-or-punc 1 ,
identifier 8 ppnumber
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
identifier 8 udsuffix
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 8 ppnumber
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 23 differentiate_character
preprocessing-op-or-punc 1 (
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 ,
identifier 16 EFundamentalType
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
identifier 3 int
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 6 size_t
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 4 char
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 uint
whitespace-sequence 0 
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char32_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
preprocessing-op-or-punc 1 )
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char16_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'L'
preprocessing-op-or-punc 1 )
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 7 wchar_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 3 int
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'a'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\a'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'b'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\b'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'f'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\f'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'n'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'r'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\r'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 't'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 'v'
preprocessing-op-or-punc 1 )
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
character-literal 4 '\v'
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 -
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
preprocessing-op-or-punc 1 )
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 3 '_'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
pp-number 1 8
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 5
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
whitespace-sequence 0 
preprocessing-op-or-punc 1 *
whitespace-sequence 0 
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 ?
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 :
identifier 3 pos
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char16_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
pp-number 6 0xffff
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 8 char32_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 7 wchar_t
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 idata
whitespace-sequence 0 
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
pp-number 3 127
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 17 FundamentalTypeOf
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 nbytes
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 3 pos
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 22 emit_character_literal
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 unidata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 15 strUtf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 23 differentiate_character
preprocessing-op-or-punc 1 (
identifier 7 unidata
preprocessing-op-or-punc 1 ,
identifier 4 type
preprocessing-op-or-punc 1 ,
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 6 nbytes
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_literal
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 idata
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 35 emit_user_defined_character_literal
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 unidata
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 15 strUtf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 16 EFundamentalType
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 idata
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 size_t
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 3 pos
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 23 differentiate_character
preprocessing-op-or-punc 1 (
identifier 7 unidata
preprocessing-op-or-punc 1 ,
identifier 4 type
preprocessing-op-or-punc 1 ,
identifier 5 idata
preprocessing-op-or-punc 1 ,
identifier 6 nbytes
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 type
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 10 FT_INVALID
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 35 emit_user_defined_literal_character
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 .
identifier 6 substr
preprocessing-op-or-punc 1 (
identifier 3 pos
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 4 type
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
identifier 5 idata
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 6 nbytes
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 19 emit_string_literal
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 32 emit_user_defined_string_literal
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 4 data
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 3 "#"
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 data
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
string-literal 4 "##"
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 data
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 4 "%:"
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 4 data
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 6 "%:%:"
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 11 emit_simple
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 20 StringToTokenTypeMap
preprocessing-op-or-punc 1 .
identifier 2 at
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 24 emit_non_whitespace_char
preprocessing-op-or-punc 1 (
identifier 5 const
whitespace-sequence 0 
identifier 6 string
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 4 data
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 12 emit_invalid
preprocessing-op-or-punc 1 (
identifier 4 data
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 void
whitespace-sequence 0 
identifier 8 emit_eof
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 15 string_literals
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 21 clear_string_literals
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 8 emit_eof
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 ~
identifier 14 IPPTokenStream
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 struct
whitespace-sequence 0 
identifier 11 PPTokenizer
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 14 IPPTokenStream
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 11 PPTokenizer
preprocessing-op-or-punc 1 (
identifier 14 IPPTokenStream
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 (
identifier 6 output
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 7 process
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'U'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '{'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "{"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '}'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "}"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '['
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "["
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ']'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "]"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "("
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ")"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ';'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ";"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "?"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '~'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "~"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ','
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ","
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 13 emit_new_line
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '#'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 26
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 27
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '!'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '/'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '^'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 29
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '&'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 30
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '|'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 31
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 32
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 17 "partial comment"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_non_whitespace_char
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0x0d
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 32 Digraph_IdentifierLike_Operators
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 32 Digraph_IdentifierLike_Operators
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 9 "include"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 40
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 14 emit_pp_number
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 14 emit_pp_number
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 3 "."
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_cchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 40 "state 7:unterminated character literal"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 22 emit_character_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 35 emit_user_defined_character_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_schar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 38 "state 13:unterminated string literal"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 19 emit_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 32 emit_user_defined_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 19 emit_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '#'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "##"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "#"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 "<<="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ":>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ":>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ":"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 24
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "%"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 24
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 25
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 25
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 6 "%:%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "%"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 26
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "+"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 27
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 28
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "-"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 28
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 "->*"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "->"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 29
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 30
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '&'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "&"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 31
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '|'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "|"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 32
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 33
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ">="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ">"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 33
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 ">>="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ">>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 31 SimpleEscapeSequence_CodePoints
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 31 SimpleEscapeSequence_CodePoints
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 35
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 38
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 27 "invalid escape sequence\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 35
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 36
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 36
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 38
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 27 "invalid escape sequence\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 40
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_hchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 16 emit_header_name
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_qchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 16 emit_header_name
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 32 "Big DFA failed, what the fuck!"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 8 emit_eof
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 4 main
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
new-line 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 3 try
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 13 ostringstream
whitespace-sequence 0 
identifier 3 oss
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 3 oss
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 3 cin
preprocessing-op-or-punc 1 .
identifier 5 rdbuf
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 5 input
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 3 oss
preprocessing-op-or-punc 1 .
identifier 3 str
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 input
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 6 iinput
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 Translate
preprocessing-op-or-punc 1 (
identifier 5 input
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 iinput
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 14 IPPTokenStream
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 11 PPTokenizer
whitespace-sequence 0 
identifier 9 tokenizer
preprocessing-op-or-punc 1 (
identifier 6 output
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
new-line 0 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 4 uint
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 6 iinput
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 9 code_unit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 6 iinput
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 9 tokenizer
preprocessing-op-or-punc 1 .
identifier 7 process
preprocessing-op-or-punc 1 (
identifier 9 code_unit
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
whitespace-sequence 0 
identifier 5 catch
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 9 exception
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 1 e
preprocessing-op-or-punc 1 )
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
new-line 0 
whitespace-sequence 0 
identifier 4 cerr
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 9 "ERROR: "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 1 e
preprocessing-op-or-punc 1 .
identifier 4 what
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 EXIT_FAILURE
preprocessing-op-or-punc 1 ;
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
new-line 0 
preprocessing-op-or-punc 1 }
new-line 0 
eof
