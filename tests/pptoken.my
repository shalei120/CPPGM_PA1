preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 10 <iostream>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <sstream>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 9 <fstream>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 11 <stdexcept>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 11 <algorithm>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 15 <unordered_map>
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 15 <unordered_set>
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 5 using
whitespace-sequence 0 
identifier 9 namespace
whitespace-sequence 0 
identifier 3 std
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 18 "IPPTokenStream.h"
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 #
identifier 7 include
whitespace-sequence 0 
header-name 22 "DebugPPTokenStream.h"
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x1f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x0f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 12
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 0
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x07
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 18
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 1
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 2 12
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 2
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 <<
pp-number 1 6
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 [
pp-number 1 3
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 24 "utf8-->unicode failed!"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 4 0x7f
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 1 0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 5 0x7ff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 4 0x80
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xC0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0x07c0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 6 0xffff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 5 0x800
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xe0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 6 0xf000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 12
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 5 0xfc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 u
preprocessing-op-or-punc 2 <=
pp-number 8 0x10ffff
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 u
preprocessing-op-or-punc 2 >=
pp-number 7 0x10000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0xf0
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 8 0x1c0000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 18
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 7 0x3f000
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 2 12
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 5 0xfc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 >>
pp-number 1 6
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
pp-number 4 0x80
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 u
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0x3f
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 28 "utf8 segmentation error!\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 9 EndOfFile
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
identifier 9 constexpr
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 14 PartialComment
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 10 0x00110000
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 switch
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '1'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '2'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '3'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '4'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '5'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '6'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '7'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 '9'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'A'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'B'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'C'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'c'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'D'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'd'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'e'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'F'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
character-literal 3 'f'
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 31 "HexCharToValue of nonhex char"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 4 pair
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xA8
preprocessing-op-or-punc 1 ,
pp-number 4 0xA8
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAA
preprocessing-op-or-punc 1 ,
pp-number 4 0xAA
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAD
preprocessing-op-or-punc 1 ,
pp-number 4 0xAD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xAF
preprocessing-op-or-punc 1 ,
pp-number 4 0xAF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xB2
preprocessing-op-or-punc 1 ,
pp-number 4 0xB5
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xB7
preprocessing-op-or-punc 1 ,
pp-number 4 0xBA
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xBC
preprocessing-op-or-punc 1 ,
pp-number 4 0xBE
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xC0
preprocessing-op-or-punc 1 ,
pp-number 4 0xD6
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xD8
preprocessing-op-or-punc 1 ,
pp-number 4 0xF6
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 4 0xF8
preprocessing-op-or-punc 1 ,
pp-number 4 0xFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 5 0x100
preprocessing-op-or-punc 1 ,
pp-number 6 0x167F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x1681
preprocessing-op-or-punc 1 ,
pp-number 6 0x180D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x180F
preprocessing-op-or-punc 1 ,
pp-number 6 0x1FFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x200B
preprocessing-op-or-punc 1 ,
pp-number 6 0x200D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x202A
preprocessing-op-or-punc 1 ,
pp-number 6 0x202E
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x203F
preprocessing-op-or-punc 1 ,
pp-number 6 0x2040
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2054
preprocessing-op-or-punc 1 ,
pp-number 6 0x2054
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2060
preprocessing-op-or-punc 1 ,
pp-number 6 0x206F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2070
preprocessing-op-or-punc 1 ,
pp-number 6 0x218F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2460
preprocessing-op-or-punc 1 ,
pp-number 6 0x24FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2776
preprocessing-op-or-punc 1 ,
pp-number 6 0x2793
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2C00
preprocessing-op-or-punc 1 ,
pp-number 6 0x2DFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x2E80
preprocessing-op-or-punc 1 ,
pp-number 6 0x2FFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3004
preprocessing-op-or-punc 1 ,
pp-number 6 0x3007
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3021
preprocessing-op-or-punc 1 ,
pp-number 6 0x302F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3031
preprocessing-op-or-punc 1 ,
pp-number 6 0x303F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x3040
preprocessing-op-or-punc 1 ,
pp-number 6 0xD7FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xF900
preprocessing-op-or-punc 1 ,
pp-number 6 0xFD3D
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFD40
preprocessing-op-or-punc 1 ,
pp-number 6 0xFDCF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFDF0
preprocessing-op-or-punc 1 ,
pp-number 6 0xFE44
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFE47
preprocessing-op-or-punc 1 ,
pp-number 6 0xFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x10000
preprocessing-op-or-punc 1 ,
pp-number 7 0x1FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x20000
preprocessing-op-or-punc 1 ,
pp-number 7 0x2FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x30000
preprocessing-op-or-punc 1 ,
pp-number 7 0x3FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x40000
preprocessing-op-or-punc 1 ,
pp-number 7 0x4FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x50000
preprocessing-op-or-punc 1 ,
pp-number 7 0x5FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x60000
preprocessing-op-or-punc 1 ,
pp-number 7 0x6FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x70000
preprocessing-op-or-punc 1 ,
pp-number 7 0x7FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x80000
preprocessing-op-or-punc 1 ,
pp-number 7 0x8FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0x90000
preprocessing-op-or-punc 1 ,
pp-number 7 0x9FFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xA0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xAFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xB0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xBFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xC0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xCFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xD0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xDFFFD
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 7 0xE0000
preprocessing-op-or-punc 1 ,
pp-number 7 0xEFFFD
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 4 pair
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 3 int
preprocessing-op-or-punc 2 >>
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 5 0x300
preprocessing-op-or-punc 1 ,
pp-number 5 0x36F
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x1DC0
preprocessing-op-or-punc 1 ,
pp-number 6 0x1DFF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0x20D0
preprocessing-op-or-punc 1 ,
pp-number 6 0x20FF
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
pp-number 6 0xFE20
preprocessing-op-or-punc 1 ,
pp-number 6 0xFE2F
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 5 first
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
identifier 40 AnnexE2_DisallowedInitially_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 6 second
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 32 Digraph_IdentifierLike_Operators
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
string-literal 5 "new"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "delete"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "and"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "and_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "bitand"
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
string-literal 7 "bitor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 7 "compl"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "not"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "not_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 4 "or"
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
string-literal 7 "or_eq"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 5 "xor"
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
string-literal 8 "xor_eq"
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 31 SimpleEscapeSequence_CodePoints
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 '"'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'n'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'r'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 't'
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
character-literal 3 'v'
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 11 Octal_Digit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
preprocessing-op-or-punc 1 ,
character-literal 3 '8'
preprocessing-op-or-punc 1 ,
character-literal 3 '9'
preprocessing-op-or-punc 1 ,
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
character-literal 3 'c'
preprocessing-op-or-punc 1 ,
character-literal 3 'd'
preprocessing-op-or-punc 1 ,
character-literal 3 'e'
preprocessing-op-or-punc 1 ,
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
character-literal 3 'A'
preprocessing-op-or-punc 1 ,
character-literal 3 'B'
preprocessing-op-or-punc 1 ,
character-literal 3 'C'
preprocessing-op-or-punc 1 ,
character-literal 3 'D'
preprocessing-op-or-punc 1 ,
character-literal 3 'E'
preprocessing-op-or-punc 1 ,
character-literal 3 'F'
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 8 Nondigit
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 'a'
preprocessing-op-or-punc 1 ,
character-literal 3 'b'
preprocessing-op-or-punc 1 ,
character-literal 3 'c'
preprocessing-op-or-punc 1 ,
character-literal 3 'd'
preprocessing-op-or-punc 1 ,
character-literal 3 'e'
preprocessing-op-or-punc 1 ,
character-literal 3 'f'
preprocessing-op-or-punc 1 ,
character-literal 3 'g'
preprocessing-op-or-punc 1 ,
character-literal 3 'h'
preprocessing-op-or-punc 1 ,
character-literal 3 'i'
preprocessing-op-or-punc 1 ,
character-literal 3 'j'
preprocessing-op-or-punc 1 ,
character-literal 3 'k'
preprocessing-op-or-punc 1 ,
character-literal 3 'l'
preprocessing-op-or-punc 1 ,
character-literal 3 'm'
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 'n'
preprocessing-op-or-punc 1 ,
character-literal 3 'o'
preprocessing-op-or-punc 1 ,
character-literal 3 'p'
preprocessing-op-or-punc 1 ,
character-literal 3 'q'
preprocessing-op-or-punc 1 ,
character-literal 3 'r'
preprocessing-op-or-punc 1 ,
character-literal 3 's'
preprocessing-op-or-punc 1 ,
character-literal 3 't'
preprocessing-op-or-punc 1 ,
character-literal 3 'u'
preprocessing-op-or-punc 1 ,
character-literal 3 'v'
preprocessing-op-or-punc 1 ,
character-literal 3 'w'
preprocessing-op-or-punc 1 ,
character-literal 3 'x'
preprocessing-op-or-punc 1 ,
character-literal 3 'y'
preprocessing-op-or-punc 1 ,
character-literal 3 'z'
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 'A'
preprocessing-op-or-punc 1 ,
character-literal 3 'B'
preprocessing-op-or-punc 1 ,
character-literal 3 'C'
preprocessing-op-or-punc 1 ,
character-literal 3 'D'
preprocessing-op-or-punc 1 ,
character-literal 3 'E'
preprocessing-op-or-punc 1 ,
character-literal 3 'F'
preprocessing-op-or-punc 1 ,
character-literal 3 'G'
preprocessing-op-or-punc 1 ,
character-literal 3 'H'
preprocessing-op-or-punc 1 ,
character-literal 3 'I'
preprocessing-op-or-punc 1 ,
character-literal 3 'J'
preprocessing-op-or-punc 1 ,
character-literal 3 'K'
preprocessing-op-or-punc 1 ,
character-literal 3 'L'
preprocessing-op-or-punc 1 ,
character-literal 3 'M'
preprocessing-op-or-punc 1 ,
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 'N'
preprocessing-op-or-punc 1 ,
character-literal 3 'O'
preprocessing-op-or-punc 1 ,
character-literal 3 'P'
preprocessing-op-or-punc 1 ,
character-literal 3 'Q'
preprocessing-op-or-punc 1 ,
character-literal 3 'R'
preprocessing-op-or-punc 1 ,
character-literal 3 'S'
preprocessing-op-or-punc 1 ,
character-literal 3 'T'
preprocessing-op-or-punc 1 ,
character-literal 3 'U'
preprocessing-op-or-punc 1 ,
character-literal 3 'V'
preprocessing-op-or-punc 1 ,
character-literal 3 'W'
preprocessing-op-or-punc 1 ,
character-literal 3 'X'
preprocessing-op-or-punc 1 ,
character-literal 3 'Y'
preprocessing-op-or-punc 1 ,
character-literal 3 'Z'
preprocessing-op-or-punc 1 ,
character-literal 3 '_'
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 5 const
whitespace-sequence 0 
identifier 13 unordered_set
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 =
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
character-literal 3 '0'
preprocessing-op-or-punc 1 ,
character-literal 3 '1'
preprocessing-op-or-punc 1 ,
character-literal 3 '2'
preprocessing-op-or-punc 1 ,
character-literal 3 '3'
preprocessing-op-or-punc 1 ,
character-literal 3 '4'
preprocessing-op-or-punc 1 ,
character-literal 3 '5'
preprocessing-op-or-punc 1 ,
character-literal 3 '6'
preprocessing-op-or-punc 1 ,
character-literal 3 '7'
preprocessing-op-or-punc 1 ,
character-literal 3 '8'
preprocessing-op-or-punc 1 ,
character-literal 3 '9'
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 <
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 5 first
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 <=
whitespace-sequence 0 
identifier 28 AnnexE1_Allowed_RangesSorted
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 .
identifier 6 second
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Nondigit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 8 Nondigit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_dchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 '('
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 ')'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\t'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\v'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\f'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_cchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\''
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_schar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\"'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\\'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_hchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 8 Is_qchar
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 4 '\"'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
identifier 6 struct
whitespace-sequence 0 
identifier 11 PPTokenizer
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 14 IPPTokenStream
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 11 PPTokenizer
preprocessing-op-or-punc 1 (
identifier 14 IPPTokenStream
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 (
identifier 6 output
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 7 process
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ,
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'u'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'U'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'U'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'L'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'u'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '{'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "{"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '}'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "}"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '['
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "["
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ']'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "]"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "("
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ")"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ';'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ";"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "?"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '~'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "~"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ','
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ","
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\n'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 13 emit_new_line
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '#'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 26
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 27
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '!'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '/'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '^'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 29
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '&'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 30
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '|'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 31
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 32
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 17 "partial comment"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_non_whitespace_char
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0x0d
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\t'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 32 Digraph_IdentifierLike_Operators
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 32 Digraph_IdentifierLike_Operators
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
string-literal 9 "include"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 40
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
identifier 4 else
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'e'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'E'
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 14 emit_pp_number
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 14 emit_pp_number
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 '.'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 3 "."
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "."
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_cchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 40 "state 7:unterminated character literal"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 22 emit_character_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 35 emit_user_defined_character_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\''
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '8'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 15 emit_identifier
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_schar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 38 "state 13:unterminated string literal"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
preprocessing-op-or-punc 1 !
identifier 17 Is_Initial_Banned
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 19 emit_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 5 Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 32 emit_user_defined_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 22 Is_identifier_nondigit
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 12 Unicode2Utf8
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 19 emit_string_literal
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '#'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "##"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "#"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 "<<="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ":>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "<:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "<"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "::"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ":>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ":"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 24
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "%"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 24
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '%'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 25
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 6 header
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 25
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ':'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 6 "%:%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "%:"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "%"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 26
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '+'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "+"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 27
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '-'
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 28
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "-"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 28
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '*'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 "->*"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 "->"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 29
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 30
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '&'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "&"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 31
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '|'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 "|"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 32
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 33
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ">="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 3 ">"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 33
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '='
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 5 ">>="
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 29 emit_preprocessing_op_or_punc
preprocessing-op-or-punc 1 (
string-literal 4 ">>"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 34
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 31 SimpleEscapeSequence_CodePoints
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 31 SimpleEscapeSequence_CodePoints
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 35
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 'x'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 38
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 27 "invalid escape sequence\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 35
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 36
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 36
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 11 Octal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 38
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 27 "invalid escape sequence\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 39
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 10 escapefrom
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 10 escapefrom
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 40
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 41
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '<'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 24 emit_whitespace_sequence
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_hchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 42
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '>'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 16 emit_header_name
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_qchar
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 43
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 16 emit_header_name
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 11 headerstart
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 5 false
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 32 "Big DFA failed, what the fuck!"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 2 if
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 .
identifier 8 emit_eof
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 5 class
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
identifier 6 public
preprocessing-op-or-punc 1 :
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 const
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 13 RawStringBase
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 10 0x00120000
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 9 RawString
preprocessing-op-or-punc 1 ,
identifier 9 delimiter
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 static
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 9 Translate
preprocessing-op-or-punc 1 (
identifier 6 string
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 bool
whitespace-sequence 0 
identifier 11 exitsuccess
preprocessing-op-or-punc 1 =
identifier 4 true
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 1 s
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 switch
preprocessing-op-or-punc 1 (
identifier 5 state
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 10
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xc0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xe0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xf0
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 8 unsigned
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 1
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 2
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 utf8
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 +
pp-number 1 3
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 12 Utf82Unicode
preprocessing-op-or-punc 1 (
identifier 4 utf8
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
preprocessing-op-or-punc 1 -
pp-number 1 1
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
pp-number 4 0xf8
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 32 "utf8 invalid unit (111111xx)\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 16
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'R'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 20
preprocessing-op-or-punc 1 ;
identifier 9 RawString
preprocessing-op-or-punc 2 +=
character-literal 3 'R'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'u'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 2
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 'U'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 6
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 2
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 3
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 5
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 6
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 7
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 3
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 8
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 4
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 1 9
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 5
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 10
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '?'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 11
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 11
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '='
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '#'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 4 '\\'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\''
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '^'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '('
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '['
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 ')'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 ']'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '!'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '|'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '<'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '{'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '>'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '}'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '-'
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 =
character-literal 3 '~'
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 2
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '?'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 12
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 6
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 13
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 7
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 14
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 8
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 15
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 4 find
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 17 Hexadecimal_Digit
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
pp-number 1 4
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 14 HexCharToValue
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 6 result
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 9
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 4 '\\'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 16
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 19
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 17
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 18
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 18
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '/'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 3 '*'
preprocessing-op-or-punc 1 )
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 18
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
identifier 9 EndOfFile
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 14 PartialComment
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 17
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
pp-number 4 0x0a
whitespace-sequence 0 
preprocessing-op-or-punc 2 ||
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 ' '
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 19
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 20
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 2 ==
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
character-literal 3 'R'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 21
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 8 Is_dchar
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 21
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 22
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 '('
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
whitespace-sequence 0 
identifier 5 throw
whitespace-sequence 0 
preprocessing-op-or-punc 3 new
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 44 "invalid characters in raw string delimiter"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 :
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
identifier 5 state
preprocessing-op-or-punc 1 =
pp-number 2 23
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
character-literal 3 ')'
preprocessing-op-or-punc 1 ;
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 case
whitespace-sequence 0 
pp-number 2 23
preprocessing-op-or-punc 1 :
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 j
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 ,
identifier 1 k
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 k
preprocessing-op-or-punc 1 <
identifier 9 delimiter
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 j
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 ,
identifier 1 k
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 !=
whitespace-sequence 0 
identifier 9 delimiter
preprocessing-op-or-punc 1 [
identifier 1 k
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 j
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 11 exitsuccess
preprocessing-op-or-punc 1 =
identifier 5 false
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 j
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 11 exitsuccess
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 9 delimiter
preprocessing-op-or-punc 1 .
identifier 6 length
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
whitespace-sequence 0 
preprocessing-op-or-punc 2 ==
whitespace-sequence 0 
character-literal 4 '\"'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 1 0
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 1 s
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 9 RawString
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
identifier 13 RawStringBase
whitespace-sequence 0 
preprocessing-op-or-punc 1 +
whitespace-sequence 0 
identifier 10 RawStrings
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 state
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
pp-number 2 22
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 11 exitsuccess
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 4 true
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 break
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 default
preprocessing-op-or-punc 1 :
identifier 5 throw
whitespace-sequence 0 
preprocessing-op-or-punc 3 new
whitespace-sequence 0 
identifier 11 logic_error
preprocessing-op-or-punc 1 (
string-literal 43 "little DFA failed? What the hell is it?\n"
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 !
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 5 empty
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 &&
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 4 back
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 2 !=
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
identifier 7 results
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
pp-number 4 0x0a
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 7 results
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 6 string
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 10 RawStrings
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 RawString
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 delimiter
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
string-literal 2 ""
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 4 bool
whitespace-sequence 0 
identifier 19 Is_RawStringPointer
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 2 >=
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 13 RawStringBase
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 12 GetRawString
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 10 RawStrings
preprocessing-op-or-punc 1 [
identifier 1 c
whitespace-sequence 0 
preprocessing-op-or-punc 1 -
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 13 RawStringBase
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 8 char2bin
preprocessing-op-or-punc 1 (
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 a
preprocessing-op-or-punc 1 =
identifier 1 c
preprocessing-op-or-punc 1 ;
identifier 1 a
preprocessing-op-or-punc 1 ;
identifier 1 a
preprocessing-op-or-punc 2 /=
pp-number 1 2
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 2 +=
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 a
preprocessing-op-or-punc 1 %
pp-number 1 2
preprocessing-op-or-punc 1 +
character-literal 3 '0'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 reverse
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 5 begin
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
identifier 6 string
whitespace-sequence 0 
identifier 8 char2hex
preprocessing-op-or-punc 1 (
identifier 8 unsigned
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 1 c
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 a
preprocessing-op-or-punc 1 =
identifier 1 c
preprocessing-op-or-punc 1 ;
identifier 1 a
preprocessing-op-or-punc 1 ;
identifier 1 a
preprocessing-op-or-punc 2 /=
pp-number 2 16
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 1 a
preprocessing-op-or-punc 1 %
pp-number 2 16
preprocessing-op-or-punc 1 <
pp-number 2 10
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 2 +=
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 a
preprocessing-op-or-punc 1 %
pp-number 2 16
preprocessing-op-or-punc 1 +
character-literal 3 '0'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 else
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 2 +=
identifier 4 char
preprocessing-op-or-punc 1 (
identifier 1 a
preprocessing-op-or-punc 1 %
pp-number 2 16
preprocessing-op-or-punc 1 -
pp-number 2 10
preprocessing-op-or-punc 1 +
character-literal 3 'a'
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 7 reverse
preprocessing-op-or-punc 1 (
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 5 begin
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ,
identifier 6 result
preprocessing-op-or-punc 1 .
identifier 3 end
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 6 result
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
identifier 3 int
whitespace-sequence 0 
identifier 4 main
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 try
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 13 ostringstream
whitespace-sequence 0 
identifier 3 oss
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 oss
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 3 cin
preprocessing-op-or-punc 1 .
identifier 5 rdbuf
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 string
whitespace-sequence 0 
identifier 5 input
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 3 oss
preprocessing-op-or-punc 1 .
identifier 3 str
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 5 input
whitespace-sequence 0 
preprocessing-op-or-punc 2 +=
whitespace-sequence 0 
identifier 4 char
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 vector
preprocessing-op-or-punc 1 <
identifier 3 int
preprocessing-op-or-punc 1 >
whitespace-sequence 0 
identifier 6 iinput
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 12 PPTranslator
preprocessing-op-or-punc 2 ::
identifier 9 Translate
preprocessing-op-or-punc 1 (
identifier 5 input
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 6 iinput
preprocessing-op-or-punc 1 .
identifier 9 push_back
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 18 DebugPPTokenStream
whitespace-sequence 0 
identifier 6 output
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 11 PPTokenizer
whitespace-sequence 0 
identifier 9 tokenizer
preprocessing-op-or-punc 1 (
identifier 6 output
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 3 for
preprocessing-op-or-punc 1 (
identifier 3 int
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
pp-number 1 0
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 1 <
identifier 6 iinput
preprocessing-op-or-punc 1 .
identifier 4 size
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 ;
identifier 1 i
preprocessing-op-or-punc 2 ++
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
identifier 3 int
whitespace-sequence 0 
identifier 9 code_unit
whitespace-sequence 0 
preprocessing-op-or-punc 1 =
whitespace-sequence 0 
identifier 6 iinput
preprocessing-op-or-punc 1 [
identifier 1 i
preprocessing-op-or-punc 1 ]
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 2 if
preprocessing-op-or-punc 1 (
identifier 9 tokenizer
preprocessing-op-or-punc 1 .
identifier 7 process
preprocessing-op-or-punc 1 (
identifier 9 code_unit
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 )
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 1 i
preprocessing-op-or-punc 1 =
identifier 1 i
preprocessing-op-or-punc 1 -
pp-number 1 1
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 5 catch
whitespace-sequence 0 
preprocessing-op-or-punc 1 (
identifier 9 exception
preprocessing-op-or-punc 1 &
whitespace-sequence 0 
identifier 1 e
preprocessing-op-or-punc 1 )
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 {
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 4 cerr
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
string-literal 9 "ERROR: "
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 1 e
preprocessing-op-or-punc 1 .
identifier 4 what
preprocessing-op-or-punc 1 (
preprocessing-op-or-punc 1 )
whitespace-sequence 0 
preprocessing-op-or-punc 2 <<
whitespace-sequence 0 
identifier 4 endl
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
identifier 6 return
whitespace-sequence 0 
identifier 12 EXIT_FAILURE
preprocessing-op-or-punc 1 ;
non-whitespace-character 1 
new-line 0 
whitespace-sequence 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
preprocessing-op-or-punc 1 }
non-whitespace-character 1 
new-line 0 
non-whitespace-character 1 
new-line 0 
eof
